import{_ as d,r as l,o as r,c as n,a as i,b as e,d as c,e as o}from"./app-114ee310.js";const t={},s=o('<h3 id="css-盒模型" tabindex="-1"><a class="header-anchor" href="#css-盒模型" aria-hidden="true">#</a> CSS 盒模型</h3><p>每个盒子由四个区域组成，内容区域（content area），内边距区域（padding area），边框区域（border area），外边距区域（margin area）。<br><code>box-sizing</code>定义了应该如何计算一个元素的总宽度和总高度：</p><ul><li><code>content-box</code>：默认值，任何边框和内边距的宽度高度都会增加到最后绘制出来的元素宽高上。</li><li><code>border-box</code>：设置的边框和内边距的值包含在元素宽高中的。实际宽高是 width/height 减去 border + padding 的值。可以更容易的设置元素的宽高。</li></ul><h3 id="display属性" tabindex="-1"><a class="header-anchor" href="#display属性" aria-hidden="true">#</a> <code>display</code>属性</h3><p>CSS<code>dispaly</code>设置元素的布局方式，控制了内部和外部的显示类型。外部类型设置元素参与流式布局；内部类型设置子元素的布局。</p><p>开发时最常使用的<code>display</code>属性值有以下几种：</p><ol><li><code>block</code>: 块级元素，在流式布局中元前后元素会换行。默认宽度是父元素的 100%，高度与内容高度一致.</li><li><code>inline</code>: 内联元素盒，在流式布局中如果有空间，会和前后元素在同一行上。高度和宽度与内容一致，无法设置宽度高。可以设置水平外边距、边框、内边距。</li><li><code>inlint-block</code>: 行内块元素，区别于<code>inline</code>允许在元素上设置宽度和高度，保留上下外边距\\内边距。</li><li><code>flex</code>: 类似块级元素根据<strong>弹性盒模型</strong>布局内容。</li><li><code>grid</code>: 类似块级元素根据<strong>网格模型</strong>布局内容。</li><li><code>inline-flex</code>:</li><li><code>inline-grid</code>:</li></ol><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><h3 id="流式布局-标准文档流" tabindex="-1"><a class="header-anchor" href="#流式布局-标准文档流" aria-hidden="true">#</a> 流式布局（标准文档流）</h3>',9),h=i("br",null,null,-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing",target:"_blank",rel:"noopener noreferrer"},p=i("br",null,null,-1),_=o('<h3 id="网格布局-grid-box" tabindex="-1"><a class="header-anchor" href="#网格布局-grid-box" aria-hidden="true">#</a> 网格布局（grid-box）</h3><h2 id="格式化上下文" tabindex="-1"><a class="header-anchor" href="#格式化上下文" aria-hidden="true">#</a> 格式化上下文</h2><h3 id="块级格式化上下文-bfc-block-formatting-contexts" tabindex="-1"><a class="header-anchor" href="#块级格式化上下文-bfc-block-formatting-contexts" aria-hidden="true">#</a> 块级格式化上下文 BFC（Block formatting Contexts）</h3><p>页面上一个隔离的独立容器，容器里的子元素不会影响到外面元素，内部元素按照正常的块和内联布局规则进行布局，创建块格式化上下文：</p><ul><li>根元素；</li><li>浮动元素；</li><li>定位元素（absolute、fixed、sticky）；</li><li><code>display: inline-block</code>；</li><li>块级元素的 overflow 不为 visible；</li><li>弹性、网格布局元素；</li></ul>',5);function x(f,g){const a=l("ExternalLinkIcon");return r(),n("div",null,[s,i("p",null,[e("浏览器默认的布局方式，规定了块格式区域和内联格式区域:"),h,e(" 对于块格式区域，盒子会从包含块的顶部开始，垂直排序。相邻的两个块级盒子之间垂直边距会产生"),i("a",b,[e("外边距重叠"),c(a)]),e("现象，保留较大者。也就是按照块级格式化上下文进行布局。"),p,e(" 对于内联格式区域，盒子会从包含块的顶部开始，水平排序。只有水平外边距，边框和内边距会被保留。")]),_])}const m=d(t,[["render",x],["__file","display.html.vue"]]);export{m as default};
