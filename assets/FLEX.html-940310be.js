const e=JSON.parse('{"key":"v-54d6697f","path":"/demo/WebDevelopment/CSS/FLEX.html","title":"flex布局","lang":"zh-CN","frontmatter":{"category":"CSS","tag":"flex","author":"dahu","title":"flex布局","article":false,"description":"弹性布局 弹性布局是一种一维布局，一次只能处理一个维度上的元素布局。通过设置display: flex创建 flex 容器，设置之后属性都有一些初值： 元素排为一行flex-direction: row； justify-content: flex-start从主轴起始线开始，主轴方向不会被拉伸（元素宽度是多宽在主轴上就是多少，不像块级元素占满一行了），但可被压缩（元素太多超出容器不会换行）； align-items属性为stretch在交叉轴方向就被拉伸； flex-wrap属性为nowrap； flex-basis属性为auto；","head":[["meta",{"property":"og:url","content":"https://yjw24.github.io/YJW24/YJW24/demo/WebDevelopment/CSS/FLEX.html"}],["meta",{"property":"og:site_name","content":"YJW24"}],["meta",{"property":"og:title","content":"flex布局"}],["meta",{"property":"og:description","content":"弹性布局 弹性布局是一种一维布局，一次只能处理一个维度上的元素布局。通过设置display: flex创建 flex 容器，设置之后属性都有一些初值： 元素排为一行flex-direction: row； justify-content: flex-start从主轴起始线开始，主轴方向不会被拉伸（元素宽度是多宽在主轴上就是多少，不像块级元素占满一行了），但可被压缩（元素太多超出容器不会换行）； align-items属性为stretch在交叉轴方向就被拉伸； flex-wrap属性为nowrap； flex-basis属性为auto；"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"dahu"}],["meta",{"property":"article:tag","content":"flex"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"flex布局\\",\\"description\\":\\"弹性布局 弹性布局是一种一维布局，一次只能处理一个维度上的元素布局。通过设置display: flex创建 flex 容器，设置之后属性都有一些初值： 元素排为一行flex-direction: row； justify-content: flex-start从主轴起始线开始，主轴方向不会被拉伸（元素宽度是多宽在主轴上就是多少，不像块级元素占满一行了），但可被压缩（元素太多超出容器不会换行）； align-items属性为stretch在交叉轴方向就被拉伸； flex-wrap属性为nowrap； flex-basis属性为auto；\\"}"]]},"headers":[{"level":2,"title":"弹性布局中控制对齐方式","slug":"弹性布局中控制对齐方式","link":"#弹性布局中控制对齐方式","children":[]},{"level":2,"title":"弹性布局中控制排序方式","slug":"弹性布局中控制排序方式","link":"#弹性布局中控制排序方式","children":[]},{"level":2,"title":"弹性布局控制子元素在主轴比例","slug":"弹性布局控制子元素在主轴比例","link":"#弹性布局控制子元素在主轴比例","children":[{"level":3,"title":"flex-basis","slug":"flex-basis","link":"#flex-basis","children":[]},{"level":3,"title":"flex-grow","slug":"flex-grow","link":"#flex-grow","children":[]},{"level":3,"title":"flex-shrink","slug":"flex-shrink","link":"#flex-shrink","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":4.78,"words":1435},"filePathRelative":"demo/WebDevelopment/CSS/FLEX.md","excerpt":"<h1> 弹性布局</h1>\\n<p>弹性布局是一种一维布局，一次只能处理一个维度上的元素布局。通过设置<code>display: flex</code>创建 flex 容器，设置之后属性都有一些初值：</p>\\n<ul>\\n<li>元素排为一行<code>flex-direction: row</code>；</li>\\n<li><code>justify-content: flex-start</code>从主轴起始线开始，主轴方向不会被拉伸（元素宽度是多宽在主轴上就是多少，不像块级元素占满一行了），但可被压缩（元素太多超出容器不会换行）；</li>\\n<li><code>align-items</code>属性为<code>stretch</code>在交叉轴方向就被拉伸；</li>\\n<li><code>flex-wrap</code>属性为<code>nowrap</code>；</li>\\n<li><code>flex-basis</code>属性为<code>auto</code>；</li>\\n</ul>","autoDesc":true,"git":{}}');export{e as data};
