import{_ as n,o as s,c as a,e as p}from"./app-114ee310.js";const t={},e=p(`<h2 id="类-class" tabindex="-1"><a class="header-anchor" href="#类-class" aria-hidden="true">#</a> 类 class</h2><p>因为用 Object 创建对象是有缺陷的，所以 JS 创建了通过类 class 来解决问题</p><p>Object 创建对象的问题：</p><ul><li>无法区分出不同类型的对象</li><li>不方便批量创建</li></ul><p>类 class：</p><ul><li>类是对象模板，可以将对象中的属性和方法直接定义在类中，定义后，就可以直接通过类来创建对象，要创建对象第一件事就是定义类</li><li>通过同一个类创建的对象，我们称为同类对象</li><li>可以使用 instanceof 来检查一个对象是否是由某个类创建</li><li>如果某个对象是某个类所创建，则我么称该对象是这个类的实例</li></ul><p>语法：</p><p>class 类名 { } //类名要用大驼峰 const 类名 = class{ } 也可以用这种</p><p>通过构造函数创建对象 new 类( )</p><p>对象 instanceof 类名 //true or false</p><p>添加属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">;</span> <span class="token comment">//Person的实例属性name</span>
  age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment">//实例属性只能通过实例访问</span>
  <span class="token keyword">static</span> test <span class="token operator">=</span> <span class="token string">&quot;test静态属性&quot;</span><span class="token punctuation">;</span> <span class="token comment">//使用static声明的属性，是类属性</span>
  <span class="token keyword">static</span> hh <span class="token operator">=</span> <span class="token string">&quot;静态属性&quot;</span><span class="token punctuation">;</span> <span class="token comment">//静态属性只能通过类去访问 Person.hh</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// sayHello = function(){}</span>
  <span class="token comment">//添加方法的一种</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;大家好，我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token comment">//添加方法（实例方法）this就是当前实例</span>
  <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是静态方法&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token comment">//静态方法（类方法）通过类来调用 this指向的是当前类</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
 <span class="token comment">//在类中可以添加一个特殊的方法constructor</span>
 <span class="token comment">//我们叫做构造函数或构造方法</span>
 <span class="token comment">//在我们调用类创建对象时候会自动执行</span>
 <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">*</span>name<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span>age<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span>gender<span class="token operator">*</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//可以在构造函数中为实例属性进行赋值 也可以先声明属性</span>
  <span class="token comment">//在构造函数中，this表示当前创建的对象</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>面向对象的特点： 继承(拓展) 封装(安全) 多态(灵活)</p><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h3><p>对象是一个容器，用来存储不同属性，容器就必须是安全可靠的，所以对象还要负责数据安全，直接添加到对象中的属性，并不安全，因为它们可以被随意修改。</p><p>如何确保数据安全：</p><ol><li>私有化数据：将需要保护的数据设置为私有，只能在类内部使用</li><li>提供 getter 和 setter 方法来开放对数据操作 <ul><li>这样设置属性的好处 <ul><li>可以控制属性的读写权限</li><li>可以在方法中对属性的值进行验证 你要写属性就得验证是不是符合</li></ul></li></ul></li></ol><p>封装主要用来保证数据安全，实现的方式：</p><ol><li>属性私有化 给属性名前加#</li><li>构造函数</li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">get</span> <span class="token function">属性名</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#属性<span class="token punctuation">}</span> 修改 <span class="token keyword">set</span> <span class="token function">属性名</span><span class="token punctuation">(</span> <span class="token parameter">参数</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>#属性 <span class="token operator">=</span> 参数<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>可以直接 类名.属性名 但是调用的是方法 省略了括号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
 #name<span class="token punctuation">;</span>
 <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">*</span>name<span class="token operator">*</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#name<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;yjw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h3><p>JS 的函数不会检查参数类型，当对象作为参数，只要满足某些条件即可</p><p>多态提供了灵活性</p><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><ul><li>类的结构一样时，我们创建多个类就是在重复代码，这很不好，就有了继承</li><li>可以通过 extends 关键字来完成继承 class Dog extends Animal</li><li>简单理解当一个类继承另一个类时，就相当于把另一个类的代码复制到当前类中</li><li>被继承的类称为 父类，继承的类为 子类</li><li>子类还是一个类 要用还得接着用这个子类创建自己的对象</li><li>好处可以减少重复代码，不修改一个类的前提对其进行拓展</li><li>OCP 原则，程序应该对修改关闭，对拓展开放，因为开发不是一个人自己干，很多人都可能会用打同一个类。</li><li>通过在子类在中创建同名方法来重写父类方法</li><li>还可以重写构造函数 但是第一行代码必须是 constructor(参数) {super(参数)} 记得传参</li><li>在方法中可以使用<code>super.</code>来引用父类的方法</li></ul><h3 id="对象的结构" tabindex="-1"><a class="header-anchor" href="#对象的结构" aria-hidden="true">#</a> 对象的结构</h3><p>对象中存储属性的区域实际有两个：</p><ol><li>对象自身</li></ol><ul><li>直接通过对象所添加的属性，位于对象自身中</li><li>在类中通过 x = y 的形式添加的属性，位于自身中</li></ul><ol start="2"><li>原型对象(prototype)神秘的小空间</li></ol><ul><li><p>对象中还有一些内容，会存储到其他的对象里(原型对象)</p></li><li><p>在对象本身中会有一个属性用来存储原型对象，叫做<code>__proto__</code></p></li><li><p>但我们访问对象属性时，会优先访问对象自身的属性，对象自身不包含该属性时，才会去原型对象中寻找。</p></li><li><p>在类中通过 xxx( ){ }方式添加的方法，位于原型中</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token comment">//原型</span>

  <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//自身}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>主动向原型中添加的属性或者方法也位于原型中</p></li><li><p>对象.<code>__proto__</code> 可以访问对象的原型对象 不建议赋值</p></li><li><p>Object.getPrototypeOf(对象) 也可以访问原型对象</p></li><li><p>原型对象的数据：</p></li><li><p>对象中给我的数据（属性和方法等）</p></li><li><p>对象的构造函数 constructor 因为对象是由类的构造函数创建的，所以<code>p.constructor</code> 返回的就是类，可以知道对象是哪个类创建的</p></li><li><p>按照以上逻辑，对象就有原型对象，所以原型对象也有原型对象，这样构成一个原型链，原型链的长度也不同 最后一个会是 null</p></li><li><p>原型链:读取对象属性时，会优先对象自身属性，自身如果没有，则会去原型中找，依次，还没有就是原型的原型，直到 找到 Object 对象的原型(Object 的原型没有原型是 null)，还没有返回 undefined。</p></li><li><p>原型作用:</p></li><li><p>原型就相当于是一个公共区域，可以被所有该实例访问，把该类实例中的所有公共属性和方法统一存储到原型中，这样只需要创建一个属性，即可被所有实例访问</p></li><li><p>JS 的继承就是通过原型实现的，子类的原型就是一个父类的实例</p></li><li><p>有些值是每个对象都有的，比如各种方法，对于一样的值没必要重复创建，就用原型</p></li><li><p>修改原型：（没啥用可以看看）</p></li><li><p>实例通过 proto 访问原型 在修改原型</p></li><li><p>类名.prototype 属性 访问原型 不用创建实例 ，一修改就是修改所有实例原型</p></li></ul><p>instanceof 用来检查一个对象是否是一个类的实例，具体是通过检查原型链，只要原型链上有就会返回 true <code>dog instanceof Dog</code></p><p><code>对象.hasOwnProperty(&quot;&quot;属性名&quot;)</code> 用来检查一个对象的自身是否含有某个属性，不包括原型对象存储的属性方法</p><p><code>&quot;属性名&quot; in 对象</code> 使用<strong>in</strong>运算符检查属性时，无论属性在对象自身还是原型中，都会返回 true</p><p>Object.hasOwn(对象，&quot;属性&quot;) 推荐用</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>面向对象本质就是，编写代码时所有的操作都是通过对象来进行的。</p><p>面向对象的编程步骤：</p><ol><li>找对象 获取到对象</li><li>搞对象 处理对象</li></ol><p>学习对象：</p><ol><li>明确这个对象代表什么，有什么用</li><li>如何获取到</li><li>如何使用对象（属性和方法）</li></ol><p>对象分类：</p><ul><li>内建对象 JS 自带 ES 标准定义的</li><li>宿主对象 浏览器提供 DOM BOM</li><li>自定义对象 开发人员创建的对象 比如框架里的</li></ul>`,50),o=[e];function l(c,i){return s(),a("div",null,o)}const r=n(t,[["render",l],["__file","object.html.vue"]]);export{r as default};
